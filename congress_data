#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Name: Lauren Eng
Directory ID: 114761033
Date: 2020-12-18
Assignment: Final Program
"""

import requests
import sys
from matplotlib import pyplot as plt

"""
Use this file as a starting point for completing the Final Program. You can repurpose
code for HW4 and HW5 to solve this problem.

Command-line example: python3 final_project_submission.py key.txt 112-116
"""

def get(url, key): 
    headers = {"X-API-KEY": key}
    url = "http://api.propublica.org/congress/v1" + url 
    data = requests.get(url, headers = headers).json() 
    return data['results']

class Member():
    def __init__(self, kwargs): 
        self.first_name = kwargs.get('first_name')
        self.last_name = kwargs.get('last_name')
        self.date_of_birth = kwargs.get('date_of_birth')
        self.gender = kwargs.get('gender')
        self.party = kwargs.get('party')

    def calculate_age(self, year):
        member_birth_year = int(self.date_of_birth.split("-")[0]) 
        return year - member_birth_year

class Session():
    
    sessions = { "102": 1991, "103": 1993, "104": 1995, "105": 1997, "106": 1999,
             "107": 2001, "108": 2003, "109": 2005, "110": 2007, "111": 2009,
             "112": 2011, "113": 2013, "114": 2015, "115": 2017, "116": 2019
             } 
    
    def __init__(self, number): 
        self.number = str(number)
        self.year = Session.sessions[self.number]
        self.member_groups = {
            "house": [],
            "senate": [],
            "female": [],
            "male": [],
            "democrat": [],
            "republican": []
        }
    
if __name__ == "__main__":
    keypath = sys.argv[1]
    session_range = sys.argv[2]

    range_split = session_range.split("-")

    start_range = int(range_split[0])
    end_range = int(range_split[1])

    #Errors
    if ((start_range < 102) or (end_range < 102)):
        print("Please enter a valid session range")
        exit()
    elif ((start_range > 116) or (end_range > 116)):
        print("Please enter a valid session range")
        exit()
    elif (start_range > end_range):
        print("Please enter a valid session range")
        exit()

    f = open("key.txt", "r")
    apiKey = f.read()

    session_instances = []
    for congress in range(start_range, end_range+1):
        current_session = Session(congress)
        for chamber in ('house', 'senate'):
            url = f"/{congress}/{chamber}/members.json" #ex: f"/{116}/{senate}/members.json"
            data = get(url, apiKey)
            all_members = data[0]['members']

            #Adding members to lists that they apply to
            for member_data in all_members:
                member_instance = Member(member_data)

                if (member_instance.gender == "M"): #member is male
                    current_session.member_groups['male'].append(member_instance)
                else: #member is female
                    current_session.member_groups['female'].append(member_instance)
                
                if (member_instance.party == "D"): #member is democrat
                    current_session.member_groups['democrat'].append(member_instance)
                else: #member is republican
                    current_session.member_groups['republican'].append(member_instance)

                if (chamber == "house"): #chamber is house
                    current_session.member_groups['house'].append(member_instance)
                else: #chamber is senate
                    current_session.member_groups['senate'].append(member_instance)

        #list of all the session results
        session_instances.append(current_session)

    years = []
    avg_age_for_male = []
    avg_age_for_female = []
    avg_age_for_democrat = []
    avg_age_for_republican = []
    avg_age_for_house = []
    avg_age_for_senate = []           
    
    for sess in session_instances: #sess = current_session
        years.append(sess.year)
        
        # calculate average male age
        total_age = 0
        for member in sess.member_groups['male']:
            total_age += member.calculate_age(sess.year) # age = sess.year - member birth year

        avg_age_for_male.append(total_age/len(sess.member_groups['male']))

        # calculate average female age
        total_age = 0
        for member in sess.member_groups['female']:
            total_age += member.calculate_age(sess.year) #HOW CALLED CALCULATE_AGE W/O CALLING MEMBER()?

        avg_age_for_female.append(total_age/len(sess.member_groups['female']))

        # calculate average democrat age
        total_age = 0
        for member in sess.member_groups['democrat']:
            total_age += member.calculate_age(sess.year) 

        avg_age_for_democrat.append(total_age/len(sess.member_groups['democrat']))

        # calculate average republican age
        total_age = 0
        for member in sess.member_groups['republican']:
            total_age += member.calculate_age(sess.year) 

        avg_age_for_republican.append(total_age/len(sess.member_groups['republican']))

        # calculate average house age
        total_age = 0
        for member in sess.member_groups['house']:
            total_age += member.calculate_age(sess.year) 

        avg_age_for_house.append(total_age/len(sess.member_groups['house']))

        # calculate average senate age
        total_age = 0
        for member in sess.member_groups['senate']:
            total_age += member.calculate_age(sess.year)
        
        avg_age_for_senate.append(total_age/len(sess.member_groups['senate']))

    #Graph
    plt.plot(years, avg_age_for_house, label = "House of Representatives")
    plt.plot(years, avg_age_for_senate, label = "Senate")
    plt.plot(years, avg_age_for_democrat, label = "Democrat")
    plt.plot(years, avg_age_for_republican, label = "Republican")
    plt.plot(years, avg_age_for_male, label = "Male")
    plt.plot(years, avg_age_for_female, label = "Female")

    plt.title(f'Average Ages of Congressional Membership from Sessions {start_range} to {end_range}')
    plt.xlabel('Years')
    plt.ylabel('Age')
    plt.legend(loc = 'upper left')
    plt.show()